"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var ReactDOM = require("react-dom");
var PropTypes = require("prop-types");

var Clipboard = function (_React$Component) {
  _inherits(Clipboard, _React$Component);

  function Clipboard() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Clipboard);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call.apply(_ref, [this].concat(args))), _this), _this.handleCopy = function (e) {
      _this.props.onCopy(e);
    }, _this.handleKeyDown = function (e) {
      var metaKeyIsDown = e.ctrlKey || e.metaKey;
      var textIsSelected = window.getSelection().toString();

      if (!metaKeyIsDown || textIsSelected) {
        return;
      }

      var element = ReactDOM.findDOMNode(_this);
      element.focus();
      element.select();
    }, _this.handleKeyUp = function (e) {
      var element = ReactDOM.findDOMNode(_this);
      element.blur();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Clipboard, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener("keydown", this.handleKeyDown, false);
      document.addEventListener("keyup", this.handleKeyUp, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener("keydown", this.handleKeyDown, false);
      document.removeEventListener("keyup", this.handleKeyUp, false);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("textarea", _extends({}, this.props, { readOnly: true, onCopy: this.handleCopy }));
    }
  }]);

  return Clipboard;
}(React.Component);

Clipboard.propTypes = {
  value: PropTypes.string.isRequired,
  className: PropTypes.string,
  style: PropTypes.object,
  onCopy: PropTypes.func
};
Clipboard.defaultProps = {
  className: "clipboard",
  style: {
    position: "fixed",
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    height: 1,
    width: 1,
    margin: -1,
    padding: 0,
    border: 0
  },
  onCopy: function onCopy() {} // noop
};
;

module.exports = Clipboard;